set guifont=inconsolata-g:h11
set encoding=utf-8
set hidden

" escape to normal mode
inoremap jk <esc>


" {{{ vimrc manipulation
nnoremap <leader>ev :vsplit $MYVIMRC<cr>
nnoremap <leader>sv :source $MYVIMRC<cr>
" }}}


" COC  config {{
nnoremap <silent> <Leader>tf :<C-u>CocList outline<cr>
nnoremap <silent> <Leader>tF :<C-u>CocList -I symbols<cr>
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)
" }}}

" FZF vim {{{
let g:fzf_colors =
      \ { 'fg':      ['fg', 'Normal'],
      \ 'bg':      ['bg', 'Normal'],
      \ 'hl':      ['fg', 'Comment'],
      \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
      \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
      \ 'hl+':     ['fg', 'Statement'],
      \ 'info':    ['fg', 'PreProc'],
      \ 'border':  ['fg', 'Ignore'],
      \ 'prompt':  ['fg', 'Conditional'],
      \ 'pointer': ['fg', 'Exception'],
      \ 'marker':  ['fg', 'Keyword'],
      \ 'spinner': ['fg', 'Label'],
      \ 'header':  ['fg', 'Comment'] }

nnoremap <leader><space> :Files<CR>
nnoremap <leader>gf :GFiles<CR>
" }}}
"

" Autoformat {{{
" au bufWrite * :Autoformat
" }}}

" Use <leader>x for convert visual selected code to snippet
imap <leader>l <Plug>(coc-snippets-expand)
vmap <leader>j <Plug>(coc-snippets-select)
let g:coc_snippet_next = '<leader>j'
let g:coc_snippet_prev = '<leader>k'
xmap <leader>x  <Plug>(coc-convert-snippet)
" }}}
